/*
 *   Copyright (c) 2022-2023 Intel Corporation
 *   All rights reserved.
 *   SPDX-License-Identifier: BSD-3-Clause
 */
package connector

import (
	"crypto/tls"
	"crypto/x509"
	"encoding/hex"
	"net/http"
	"testing"
	"time"

	"github.com/hashicorp/go-retryablehttp"
)

var (
	token           = "eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImtpZCI6IjNmZDc1MWYyZTBkMGY1Mjg0NmMwZWNkNDk3MmM2ZTk5ZGZjNjQyMDUxY2QzMzlkZDliMDQzODFhZjhjMGRkYjgwNDUxNGE3YTFmZWU0NjczYWM4NDRmZDVkYjdmMTVmYiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.Mj4nQgujHiGidoRBkCzVtU6V7RAxD8PxFEpcMWkHHuLe_ZHamT1Sqnpn21JxaT6todQ3L21LAOIKzua_Zcuy-g91UCd501RqGTYQMP2EfoEZYk5uuiNmT37VpPSXSLSiRKAaNzjidpmiaoFkvNgupl8OWKJ9__4CA3W_EAw60mWcbU95ApvQz8m1VWTIGR4si7XMt1qUaPdS7Ey446W6RzU1wr9OAWhnPDLgffKH6ORYLGriBR6gAgCda1tmjMC6WtBZcqr0ub8R7_cfMn8qUsyiOjrQfyjw_3feJ5ooYqofY7Vq6YCzjvw_GSDxq5Ircbsnrm--ggK8FIJ6f6H1EEfZ-kw9Unocbew2Bul2xIM1wyyXvRtL9NDWiiGTL-IEqLqTBm5UBFuZ2VmZA1au0X1HaMDEBSWwWoE31xzGhZd3mYWpbWV7sDnJpJIIkPfHrh-J0e_aUQZfqUFp5uksBClTO7OTqrnV1F_JJXV_BhKdzj1w_esojOIuyypuR2Awr9Rbdx_mtX0gEgN-Cg8eOB46xYDVx50HWMs1HsBki3LFl0bynkpMXRcIKdc8aQDTKv3O-Wvt0PQ6Vf_F0zKy6Nms7gLGsuCSGoNbAFwAu0NkMHMwOYSbeLK7ijyLnOBPv4UDmk6h1L4HopX5OPe1o2qwCWCGpcTPWsJARKqoKx4"
	tokenInvalid    = "eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImtpZCI6IjNmZDc1MWYyZTBkMGY1Mjg0NmMwZWNkNDk3MmM2ZTk5ZGZjNjQyMDUxY2QzMzlkZDliMDQzODFhZjhjMGRkYjgwNDUxNGE3YTFmZWU0NjczYWM4NDRmZDVkYjdmMTVmYiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.tJPT6hz2psdkB2yuf17UjqcH1t4ujt9iwRP8iFrG93vMZN2W8umIlYVCE9NVigYoX3EkNuOq_OGlYvfdrUjsYFU-hFLvmORLbaBZ2u0GCfxgrGpYX7ngjZRad_cE9KGcmv6R2fxWI4gF-73DMeaoGWXTVAPlquV_Tyc987zeXj1KXAVO0SDWG68LiWVcl42FUlOI_2mXV4rGsgWLPgbyaa5SuSu-ENreQenvyUMMzdntbJtytQycOxYVrppQJaFNKwn8OfwloGvt7jedylCZgU1MBIrTXUN_lgKAZnFfRxUMfbiV-i73kPqWcOAxbzK8JZPAKv4AyVDWFEBhKKuxiQ"
	tokenMissingKID = "eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.IO_z9EOfF9e2noXDva33D8D2y9CS8Tf9lmB-w7cK5DNawk0r66RrjmY-jk6p8MIha126nniMRI7UZaeSSrfzwwuYVZCD35X7xRqhsRz5mpVkoluooXENIVvE4F8UVpY4yewgB6JXvFFplqaXWCSoQ8GxmwHXnHwEzS_W0df5VqTTBilRtgEEbwqBnANWWVkzm89ZX9d2ebkgow5dG9O-ra0SNhO_-66a4b78wvhiE_dw-99pnYbU-XLUwqVEu1Nk4sMW9jp7Y7d0f_WR9uOcB4SvojVJBTGc9cuCBjDI8g2zYyFs04exifYF7SQiofn1KodR5FDwOUiNwQfC-isnwa9fpKPOuGXEOJm6FBCK7cYrpP0JQrOv3IVeIh1Qix3N6-sF_TfUWgzBZlolvaf98msky8Yv0udyL0rkKMUUStV48R4TTChuAtpxoSu1Fr-sdMhWf76xGHvXjTUL_W4TZA8a3GyxLHawbcXez-Sk357djVol5xDIVAZU3ORpT4RuwPBKaoodEBSSWnFlP0l577Y7J8St0_UdGCyg8TMt2MBjaah1EJRDLOiXw_C0_Efa0rid6HbKlzwhlk6BzXQbnxdRoFBnh2KcsewQMMKfVtv3_nFxvgyiMTgdXY1lbmmVJ9rmEJlVyzCdfLoZavSrBwl5xkGipr657fmZ2Tbe6j0"
	tokenInvalidKID = "eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImtpZCI6MTIzNH0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.lsBarFSfZNLtmTJyKfcnxqoU80QTx2PJHU0cl4esXIi64iD0C0h_B2TobIfkcUHIDNnkwcmZmik9dMxQaKU59qW6yUPgN9GcglD6RpgrJ4StHaOpfJvWY6TtsuSdcWlG33wc9RhcZ4PXV4pdYx5210e0PRgGAPelyq0MvdZa1IpZUnssQulMrk6OJNs3L-7ZfI5ZQFmJyWMzWcY7HQ9Nk2vfjaYtChfmKCSVdbyrDjtzsSDY9r5bYMI5pUCxXl30RSiEYv8fOBpYB_TJPxHyC0VaYtYVLIl4ZzUzG5VS4ragjJVXZZkX1tcDSpTakmgMbcvT1aqyJ9iVGJKSzfPovht-HxYlnmPysQPgeYY4LMywlRW8RJned9ZmKZ4F5Y8aTAUWdO4_ruBL0u8Z7J8-BTGkvNUgBUx9c7p_uy1dt7MTQkDW7d6sjP89xoNHnz4z4w7erAEuBEaPrknmYokpIdqf-esynBtW4NfIKyfl-_PGJnngPn7ziBNuTqxzq0sgTdovX8nxwal3LeWVtXx6HzN5CIRcR7BpDNC5jRhsyZ0U-p4D9Iic63KXMQLhkMx3D0vxzpzlT_zhkvw-kqXNsp6sIN3XqwlZjNTX6lptjV_OXnpVgJ8pb5svURGbwWcFIDJlgaYkHn7jLHnnaKz1aaHQezClod6_vbEPyjcfrsI"
	tokenWrongKID   = "eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImtpZCI6IjEyMzQifQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.O1YS3tK9moRRMCLkqWloLHIJ_F-NfpfQVFLo4mq3ui4HCgQLAK7bELjHl__igbzF6zTOLd3fwaoCKeVF1DDwBBoPhMXkAjZQMaNBFz8xZghQZfkSJLiMygyrkzSqgzLFMOgdBJaqcKxWT-cbO3JyAmG4sbxxFo8Lh5foVCmzF88aqfX0MPvUuiQG9aNVvJFqj2gW9hTSB3ljhxeRqZhTSQcpEkE67Xpr70rcdXaLbK-Ab4gw9YrW4aMHqR1aeLWg-s1OTosRpJGKLQ90BqWUJSx1QCmzRbAsEOfUeIK2CSwD0miUw6aSR2tVQcj0peZ2T-1xr8j0UFHRGCo5iLyAGBrHuNZ5c3fPL_xygwAkGKSkaO22d0NLRjauNeMKwT16BqZvZdN050AhfkMrwPa6AxQeJC__uBiIScKWK5ZSJJP3ba0_LHCsnnAOVZJMdD0uGdvzwXLhCTT44yeGVRbmw6KvLKjwLLotEsXY6M84rtMYnP16XeenidMH0-5YoaNOkFMR987qV-q2yXRemEHdH4KzmoBnMPtlvTSi1XW4jTM7bgziPEEK44mfZC_bkHKQnEWT51whYOPgcWYwYfjBm0oMoPKeCuIbHU6tMceGqZTsAzaWUSSlti_jVmQFR6Pp22w1d7BY-TGKDDG_wK4adj4n_KoGw5_HFYwoQfb6G_o"
	//certs/crls no need to keep in hex form
	invalidCRLCertHex   = "30820557308203bfa003020102020102300d06092a864886f70d01010d0500305b310b3009060355040613025553310b300906035504080c024341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3123302106035504030c1a496e74656c20416d62657220415453205369676e696e67204341301e170d3233303431303137343732355a170d3233313030373137343732355a3060310b3009060355040613025553310b300906035504080c024341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3128302606035504030c1f416d626572204174746573746174696f6e20546f6b656e205369676e696e6730820222300d06092a864886f70d01010105000382020f003082020a0282020100b833bb7f44d9a1521bf304c78b4080e3688d82c9fb5a8e9c513f314e7eeb4b87e92dfd04f029e96206a4a249e777c266fd69868dbc62d824261fa1c5656f811ea67b035155e806a75b858de937b65d0b9f2312d1bab91eb84697e064bee5fe63f5717c8aca3d50e075f1a8e8284f7cfee324a18060c9189bc1f92daf72cc8475151c1244e39513d8339aeb2cdcb39665065138356bdfc1c008e8ed382894fc662300b2caffcd52c06e739d7f5533414a7578b664156953d6b260dea206c8b59a02f60968d813bf75a8a0d8fb73f16d08bfcc88ec708da44ac7b6a227c81ff5e053439345f4a4e99fb0f2846630aab22123143486a705855113e81ba1aef52c31875a492f4dc1114be9254b2c86f2827c938add6ff35b5e112e7149132964abb2e4aabbf438cac65947ff38c171338be9323ecb1b101d0c2d6f38d6cb774de752c20f19569deb6f040943eb855225ca143de4265c8d199dec1f7f6d06b4dd6382ce22101f139533175972254bd782ad1f83e2ed3294611c6a9307cbe4d79e0db1b71e3bcee64f8af3ee5d0da52eb3ff9de4e0bc76e79c2cd5e58c5699bd8d755dad9ebe6f40a1c64e806c52ed7ee9bfe1e87f993d7d37cc7ef37d56aed50ba41dcecd52f35e83fa6b34d0ed6bc438c9a2e520f674977577856552b5f53ed9ba3083a92f81533d61d7321a3b355b8869c93a777661b635abf72395fb8f736ab7130203010001a381a030819d300c0603551d130101ff04023000301d0603551d0e04160414e4ddc5bd96e128a82465cb26e1bce1990d587898301f0603551d230418301680143bd92d080eb2c16881832d0d7436dc926e59c743300b0603551d0f0404030204f030400603551d1f043930373035a033a031862f5552493a68747470733a2f2f616d6265722e696e74656c662e636f6d2f6174732d7369676e696e672d63612e70656d300d06092a864886f70d01010d050003820181004279fb07bc3f336be663c838761dddb8ce5f7d28ae38800a707c4eb11c39434cb96fd741070ed1cb7becca26ab075deeb23667cfd533918fd3ccae394de3cc1ee07c800a0cb2ac7355beeb825a9a7fd791e63e8a058f260a7bf4bed9a1001154b3b9935fcc92f473aa86f933bc91e31677c4b5e08224e67e0b473ef8e82252a8430d6feec4cfd40ba0a64788346d29e1464f7e9cd497dcd35e6b561f8993d664f9d1cb08db555bd5510297cb766b7db0f032ab6ee57a495e485f87fc78fb5312948856b3c0c62b8056dc1308b40faf5bcc2fafdc871e464fb05398f4d47d35a9b39c0fdcb74ccea38bc41a821037a8e30190e998865fa8f0ae714aa4145e981a1601909eba2a9f5cd9584c7a4ae160396a692aa33d8fd686fe951e41d8ab14d01534c12477a5fae4ac715f4ee75da1e38f1689dfee2f4596da9ec069f000e80bb750a6aa2993bd049c1423ce1b677f5a7b6d28a962227507761acc156413d88baaf3bb3cb3c570aedbb11a7cb12f8329739abc44541d9d2811f0407816324433"
	invalidCACertHex    = "308204c53082032da003020102021436441d9104098f2aa434e0c9d36db2ce0cf80828300d06092a864886f70d01010d0500306a311c301a06035504030c13496e74656c20416d62657220526f6f74204341310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c617261311a3018060355040a0c11496e74656c20436f72706f726174696f6e301e170d3233303431303137343732315a170d3439313233303137343732315a306a311c301a06035504030c13496e74656c20416d62657220526f6f74204341310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c617261311a3018060355040a0c11496e74656c20436f72706f726174696f6e308201a2300d06092a864886f70d01010105000382018f003082018a0282018100caaef4384fe8e11855f33557e7d6a9bbba6e578eaba2f6f883e1582ba44b3da4a0980512a29e59b8c07a554488a11183aa94ee84a3540f4d9995431189c476e8e62ca83914c243916384a31a59c0a8b647931cfb7455927164d51071942754e286e9792b176396a18138d44b944fc73263a1d0064b723298802c81bf7a5fd1a4a773a328c687b3c050e7395929879ad5fd8b31e64e581b6015e38ab6aa511b3ac4b703e6a2d622fd4d21748694081294038cec2b0a2122addb78e8247e67ff4ce4c1ac93c1db2f24d2ac857cef6d431817d01360eec2249fb00e29a7195f72ab8b9ada0a8d09b571c666ab70c93a265a54e5fbba330cd53abf62091f42a7fe55da41c7ba0735865941fb65a4e2c714b3c6b1bb3822947e6263fbfd4c1f6e9d15d7d4b94cf6dcd0868a966a823c2dd41aee7c7c74c1fa3f12c7ead3032559f751065fa13664adf4db057f4810f52b41009c79e57535cbc268300e2addbd342efce224f2d87a47db89ba31fee519b873044e40abacfb3cb503cc75ac63b5e732550203010001a3633061300f0603551d130101ff040530030101ff301d0603551d0e04160414de4aa628f84dc5e960d5a850207fa684acfe7a56301f0603551d23041830168014de4aa628f84dc5e960d5a850207fa684acfe7a56300e0603551d0f0101ff040403020106300d06092a864886f70d01010d05000382018100774792455f8ff0e45605d3b4edbf744563a3cebaf93a29116d5b585b5e74134ade6524be5652d72e4cc57e535f9639747f9dd15f252d3423cf1f0dfa0516c8c219e6d7ee9a9859977cfc5f81e887da7f1e12f52a43bb093c01350e4c25dea4795a208bc883960d5c29cc5a016864c6e0ccb275257b43e3e0b549dd5c6181a50802413676d1887ba2b1df8dcf3d7918d46187fdf0b5a4c52b2613af55c3bf57af8c619e73801084a9ffaa302ecf0fd31fa423025b3fa9cf88debcaf798eb3ecf188dd7d3362d476de168e533689ec32e67d4dc94a10d1eb2492b020fa72fa1c700baad9be5917f81ae9e8775c1b8c9f19127048b93d5bfbf201ad19ce462e1f85bf81d7e79fe5521071e9abe6b11dea7540a2bc89791b0f09354068b5466d2bd2f0a23aad44b54e1114ad8ae61b9615f76bd120d431e0494bcbd6750f5d6444b79e6bd0163c4a83dd312ebd55cdd63d1aacd808ab5155012d22ea15ec40dcbc6a69643d2ffe4fd970abe003e9f54e26a7234c8df9a972a7104b14675b8e8e3129"
	crlHex              = "3082023430819d020101300d06092a864886f70d01010d0500305b310b3009060355040613025553310b300906035504080c024341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3123302106035504030c1a496e74656c20416d62657220415453205369676e696e67204341170d3233303730333039303730335a170d3233303830323039303730335aa00e300c300a0603551d140403020101300d06092a864886f70d01010d05000382018100576ac6b5397447de4fd7b4b471f509b52372a35290c49fba5343da2c068074a19a36e6292132351c2d36b9b5d6625281a3e096e5b742fc4ab6d6a887ce312fe78af3129929bac9b8c3a6c1d398d79a0d14dd655dbdb994099a003d965c8341240f9de72bddcc72fc5e06a43e5f6640ced02c92dc08876491088308f6a79a63aa8e5c9a1984852470acb09ac84c96b99b31997a88469806483a20f12cd89f8585d5e83a69960b986cedc88d19d61dbc8dca6bc0e5d5ee543e5edfbcc6988c331168fdcd105897628152d94b9a2eee4c3ca6a6a6285cd3538bf9bbfdcd25fa66dbbdbfb8140d634ebc810020fcb2f8b2db0899fada8f44884db8d0e8d081608c5836d115c879f46cb142e71462d0bf81a20ae06f1c9cea9e668bfe3e30a39eefd95021b4fb27d07d8eaff4862ddf926134154856d3b9cd66677d888caeae9690c27d5af3c149ef85e74e6b14897bd660de0fccbc20e109a584a351f5c865a16229f8186df5e25283ce9f6056b969caf1137b700a55e8493c59cbf891536a3fec04"
	validCertHex        = "30820556308203bea003020102020102300d06092a864886f70d01010d0500305b310b3009060355040613025553310b300906035504080c024341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3123302106035504030c1a496e74656c20416d62657220415453205369676e696e67204341301e170d3233303730333039303730335a170d3238303531373039303730335a3060310b3009060355040613025553310b300906035504080c024341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3128302606035504030c1f416d626572204174746573746174696f6e20546f6b656e205369676e696e6730820222300d06092a864886f70d01010105000382020f003082020a0282020100b833bb7f44d9a1521bf304c78b4080e3688d82c9fb5a8e9c513f314e7eeb4b87e92dfd04f029e96206a4a249e777c266fd69868dbc62d824261fa1c5656f811ea67b035155e806a75b858de937b65d0b9f2312d1bab91eb84697e064bee5fe63f5717c8aca3d50e075f1a8e8284f7cfee324a18060c9189bc1f92daf72cc8475151c1244e39513d8339aeb2cdcb39665065138356bdfc1c008e8ed382894fc662300b2caffcd52c06e739d7f5533414a7578b664156953d6b260dea206c8b59a02f60968d813bf75a8a0d8fb73f16d08bfcc88ec708da44ac7b6a227c81ff5e053439345f4a4e99fb0f2846630aab22123143486a705855113e81ba1aef52c31875a492f4dc1114be9254b2c86f2827c938add6ff35b5e112e7149132964abb2e4aabbf438cac65947ff38c171338be9323ecb1b101d0c2d6f38d6cb774de752c20f19569deb6f040943eb855225ca143de4265c8d199dec1f7f6d06b4dd6382ce22101f139533175972254bd782ad1f83e2ed3294611c6a9307cbe4d79e0db1b71e3bcee64f8af3ee5d0da52eb3ff9de4e0bc76e79c2cd5e58c5699bd8d755dad9ebe6f40a1c64e806c52ed7ee9bfe1e87f993d7d37cc7ef37d56aed50ba41dcecd52f35e83fa6b34d0ed6bc438c9a2e520f674977577856552b5f53ed9ba3083a92f81533d61d7321a3b355b8869c93a777661b635abf72395fb8f736ab7130203010001a3819f30819c300c0603551d130101ff04023000301d0603551d0e04160414e4ddc5bd96e128a82465cb26e1bce1990d587898301f0603551d230418301680148a55270f9b5a081063a1acf6a58ec474a75240ba300b0603551d0f0404030204f0303f0603551d1f043830363034a032a030862e5552493a68747470733a2f2f616d6265722e696e74656c2e636f6d2f6174732d7369676e696e672d63612e63726c300d06092a864886f70d01010d0500038201810033b0d81e29f90ecd602421b5994717bd9b681df953428889431d07bf2bac0a1e604bd4acb6bc54ec021ab502fef46c756718e53fa6bef961d9d2be423811b06d2574151fee999ce06247123bd75f361e6cd65b5951e024ef7ff4f0e3362fca4b4b32a07c1d62fea6493800950075675516b87082a6d3db577dedc9c69cc6a3ed41fb467c30b307e6c9a854438144428e4bd7d7950c77dbf78383fee9857f0ed5a7bf6c57ae2f659196fd27f8d014a884bb2b652f462a138d9efc99064fd604eed4dc81bb710ba7b07f83e37a0ed9bbbd1957ddaaabafde366bfa2422826900bfda05ad9a53be9cc6a2723775350d4e83eb9ea4285a4d843babefbd42e831f71ff2bd52edc5b0c2115a4afcf84304cc39c6b7df62b2abff43d775f074a12394a2a3d7de4308a2f8555eaec07191a3da75a6271a9588f85946bdcc9b8dc1fd90b4fc434ed28015516ad3233e896cb176bb542bf517d5e1b8266f8386db92ebf9703e9f71cdc11655c0fd06b3c4c4938d88688939f63cec91806cb700f92f057dd2"
	validInterCaCertHex = "308204cf30820337a003020102020101300d06092a864886f70d01010d0500306a311c301a06035504030c13496e74656c20416d62657220526f6f74204341310b3009060355040613025553310b300906035504080c0243413114301206035504070c0b53616e746120436c617261311a3018060355040a0c11496e74656c20436f72706f726174696f6e301e170d3233303730333039303730315a170d3336313233303039303730315a305b310b3009060355040613025553310b300906035504080c024341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3123302106035504030c1a496e74656c20416d62657220415453205369676e696e67204341308201a2300d06092a864886f70d01010105000382018f003082018a0282018100ae349f7f6d0a98251dd234e61a4782e021e3469215ab88e958a27d70635e49aa690031ea3ebc3ebbc8bca7e8669c1b529a31b26f68d6aaf5730338cbb502b973580e53113b48b32cc05bd36437faf642526eb8bbd232a3e4825b3f3dee7aa953b73bea1319b39939c9ef07ece6db55b735b18ac5249d2da5b1b5b1620a5464855db08503cb338c18aaf12ac73da14a9db8b08c794bd4b34760f7d777eb4fffdee5946f2386d7dc8057bf719b4fea1b263aedc82a53187d6aa946c476d94989e15111af86df3b5a6a94022331515908f38157fc0340ba9b616ab0bbedf32ceb951688f430087cb20fda3d29c486cf32d2d59a10aa5d40cfefb46bac2baf9d8b17efe94efe7cf98b902456678d4dc23dddc5ba9da0eafcbcff832bf6e98000b4aa0e919ed3f8019e84b80d7ddb9364af0f03694a73d94c503e556c50dcec4512eb220c807360f47442b8cf4611c8cca0f6ce124609334b244d5fb9d5f04d44e45738e5f8ca67660e2b790302141504ba1038b9a8b3a6b6102bbbeaecc091c499950203010001a3818e30818b301d0603551d0e041604148a55270f9b5a081063a1acf6a58ec474a75240ba301f0603551d2304183016801455813951be2d00681677c4139310f3c0a8d05f0e300f0603551d130101ff040530030101ff30380603551d1f0431302f302da02ba02986275552493a68747470733a2f2f616d6265722e696e74656c2e636f6d2f726f6f742d63612e63726c300d06092a864886f70d01010d050003820181006ac7e70dda6ca7a9ff91ec680d7f693d06b3291e0703fdc2480012a3e85a9757e29178563f8cef658413c77a5bc47ecd733fcfc5719fb230cd5a2c66899ffe26e8de3babb88c6a6ba62074c5f29f227a42062657854f673d5fcbc47a1c31b75fe267ec2d2cb1707cacc1722156930b92f73a55ffb70e3006de3226c7e8229ee1bea2711425958ed70297bb913c93aab6d9d1c1b8156f87bb24363f68472f9f410b45a01fefae38229fbf7220f62873dea425ee473015ce467ece0eac837684c5471cf0182a1f207df8d84ded6a4bd44697dba3cae8ad9d67912d6f4287a7c52a1698cf62b8efb1e8ae273bd1ba22109281da8ab68bbc53dd40d4919ffb4fdd54567f14ba40c47ffe8175b0a89bb46f9789274b6173fe44aa3019bb1cfe3380c7bf54595b6b7fd68ad400c19fe27b98a1db8d97f636b891623c2c47d2d93788f43db264b8be3f2daf1a71759b9bc59371f27bf2920c44b033a9391b2bb3dc4362a88d9a6be1ca8897b206cd49767db5d6ce12a9a097e2cdd030bf9fdefdf2d476"
)

func TestGetToken(t *testing.T) {
	connector, mux, _, teardown := setup()
	defer teardown()

	mux.HandleFunc(attestEndpoint, func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(`{"token":"` + token + `"}`))
	})

	nonce := &VerifierNonce{}
	evidence := &Evidence{}
	_, err := connector.GetToken(GetTokenArgs{nonce, evidence, nil, "req1", attestEndpoint, string(PS384), false})
	if err != nil {
		t.Errorf("GetToken returned unexpected error: %v", err)
	}
}

func TestGetToken_invalidToken(t *testing.T) {
	connector, mux, _, teardown := setup()
	defer teardown()

	mux.HandleFunc(attestEndpoint, func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(`invalid token`))
	})

	nonce := &VerifierNonce{}
	evidence := &Evidence{}
	_, err := connector.GetToken(GetTokenArgs{nonce, evidence, nil, "req1", attestEndpoint, "", false})
	if err == nil {
		t.Errorf("GetToken returned nil, expected error")
	}
}

func TestVerifyToken_emptyToken(t *testing.T) {
	cfg := Config{
		ApiUrl: "https://custom-url/api/v1",
	}

	connector, _ := New(&cfg)
	_, err := connector.VerifyToken("")
	if err == nil {
		t.Error("VerifyToken returned nil, expected error")
	}
}

func TestVerifyToken_missingKID(t *testing.T) {
	cfg := Config{
		ApiUrl: "https://custom-url/api/v1",
	}

	connector, _ := New(&cfg)
	_, err := connector.VerifyToken(tokenMissingKID)
	if err == nil {
		t.Error("VerifyToken returned nil, expected error")
	}
}

func TestVerifyToken_invalidKID(t *testing.T) {
	cfg := Config{
		ApiUrl: "https://custom-url/api/v1",
	}

	connector, _ := New(&cfg)
	_, err := connector.VerifyToken(tokenInvalidKID)
	if err == nil {
		t.Error("VerifyToken returned nil, expected error")
	}
}

func TestVerifyToken_wrongKID(t *testing.T) {
	connector, mux, _, teardown := setup()
	defer teardown()

	mux.HandleFunc("/certs", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(jwks))
	})

	_, err := connector.VerifyToken(tokenWrongKID)
	if err == nil {
		t.Error("VerifyToken returned nil, expected error")
	}
}

func TestVerifyToken_invalidToken(t *testing.T) {
	connector, mux, _, teardown := setup()
	defer teardown()

	mux.HandleFunc("/certs", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(jwks))
	})

	_, err := connector.VerifyToken(tokenInvalid)
	if err == nil {
		t.Error("VerifyToken returned nil, expected error")
	}
}

func TestVerifyToken_malformedJWKS(t *testing.T) {
	connector, mux, _, teardown := setup()
	defer teardown()

	mux.HandleFunc("/certs", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(`invalid jwks`))
	})

	_, err := connector.VerifyToken(token)
	if err == nil {
		t.Error("VerifyToken returned nil, expected error")
	}
}

func TestGetCRLObject_emptyCRLURL(t *testing.T) {
	var emptyCRLArry []string
	_, err := getCRL(retryablehttp.NewClient(), emptyCRLArry)
	if err == nil {
		t.Error("GetCRL returned nil, expected error")
	}
}

func TestGetCRLObject_invalidCRLUrl(t *testing.T) {
	crlUrl := ":trustauthority.intel.com"
	_, err := getCRL(retryablehttp.NewClient(), []string{crlUrl})
	if err == nil {
		t.Error("GetCRL returned nil,  expected error")
	}
}

func TestGetCRLObject_validCRLUrl(t *testing.T) {
	_, mux, serverUrl, teardown := setup()
	defer teardown()

	crlBytes, _ := hex.DecodeString(crlHex)
	crlUrl := serverUrl + "/ats.crl"
	mux.HandleFunc("/ats.crl", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write(crlBytes)
	})

	retryableClient := retryablehttp.NewClient()
	retryableClient.HTTPClient.Transport = &http.Transport{
		TLSClientConfig: &tls.Config{
			InsecureSkipVerify: true,
		},
	}

	_, err := getCRL(retryableClient, []string{crlUrl})
	if err != nil {
		t.Errorf("GetCRL returned err,  expected nil: %v", err)
	}
}

func TestGetCRLObject_invalidCRL(t *testing.T) {
	_, mux, serverUrl, teardown := setup()
	defer teardown()

	crlBytes, _ := hex.DecodeString(invalidCRLCertHex)
	crlUrl := serverUrl + "/ats.crl"
	mux.HandleFunc("/ats.crl", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write(crlBytes)
	})

	retryableClient := retryablehttp.NewClient()
	retryableClient.HTTPClient.Transport = &http.Transport{
		TLSClientConfig: &tls.Config{
			InsecureSkipVerify: true,
		},
	}

	_, err := getCRL(retryableClient, []string{crlUrl})
	if err == nil {
		t.Errorf("GetCRL returned nil,  expected error")
	}
}

func TestVerifyCRL_nullCerts(t *testing.T) {
	var leafCert *x509.Certificate
	var interCaCert *x509.Certificate

	err := verifyCRL(nil, leafCert, interCaCert)
	if err == nil {
		t.Errorf("verifyCRL returned nil, expected error")
	}
}

func TestVerifyCRL_validCertAndCrl(t *testing.T) {
	crlBytes, _ := hex.DecodeString(crlHex)
	certBytes, _ := hex.DecodeString(validCertHex)
	caCertBytes, _ := hex.DecodeString(validInterCaCertHex)
	leafCert, _ := x509.ParseCertificate(certBytes)
	interCaCert, _ := x509.ParseCertificate(caCertBytes)

	crl, _ := x509.ParseRevocationList([]byte(crlBytes))

	crl.NextUpdate = time.Now().AddDate(0, 0, 3)

	err := verifyCRL(crl, leafCert, interCaCert)
	if err != nil {
		t.Errorf("verifyCRL returned error, expected nil")
	}
}

func TestVerifyCRL_invalidCACert(t *testing.T) {
	crlBytes, _ := hex.DecodeString(crlHex)
	certBytes, _ := hex.DecodeString(invalidCRLCertHex)
	caCertBytes, _ := hex.DecodeString(invalidCACertHex)
	leafCert, _ := x509.ParseCertificate(certBytes)
	interCaCert, _ := x509.ParseCertificate(caCertBytes)

	crl, _ := x509.ParseRevocationList([]byte(crlBytes))

	err := verifyCRL(crl, leafCert, interCaCert)
	if err == nil {
		t.Errorf("verifyCRL returned nil, expected error")
	}
}

func TestVerifyCRL_outdatedCRL(t *testing.T) {
	crlBytes, _ := hex.DecodeString(crlHex)
	certBytes, _ := hex.DecodeString(validCertHex)
	caCertBytes, _ := hex.DecodeString(validInterCaCertHex)
	leafCert, _ := x509.ParseCertificate(certBytes)
	interCaCert, _ := x509.ParseCertificate(caCertBytes)

	crl, _ := x509.ParseRevocationList([]byte(crlBytes))

	crl.NextUpdate = time.Now().AddDate(0, 0, -3)

	err := verifyCRL(crl, leafCert, interCaCert)
	if err == nil {
		t.Error("verifyCRL returned nil, expected error")
	}
}

func TestVerifyCRL_revokedCert(t *testing.T) {
	crlBytes, _ := hex.DecodeString(crlHex)
	certBytes, _ := hex.DecodeString(validCertHex)
	caCertBytes, _ := hex.DecodeString(validInterCaCertHex)
	leafCert, _ := x509.ParseCertificate(certBytes)
	interCaCert, _ := x509.ParseCertificate(caCertBytes)

	crl, _ := x509.ParseRevocationList([]byte(crlBytes))

	crl.NextUpdate = time.Now().AddDate(0, 0, 3)
	revokedCert := x509.RevocationListEntry{
		SerialNumber: leafCert.SerialNumber,
	}
	crl.RevokedCertificateEntries = []x509.RevocationListEntry{revokedCert}

	err := verifyCRL(crl, leafCert, interCaCert)
	if err == nil {
		t.Error("verifyCRL returned nil, expected error")
	}
}
